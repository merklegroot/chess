---
description: 
globs: 
alwaysApply: true
---
# Next.js Project Rules
# This file contains rules specific to Next.js project organization and best practices.

# Style Guide
# For Next.js-specific patterns and project structure, we follow the official Next.js documentation:
# https://nextjs.org/docs
# In cases where Next.js documentation and other style guides conflict, prefer the Next.js approach.
#
# For general TypeScript patterns not covered by Next.js documentation, and unless explicitly specified
# otherwise in this or other rule files, or when good engineering judgment warrants divergence,
# this project follows the Google TypeScript Style Guide:
# https://google.github.io/styleguide/tsguide.html

# API Design Patterns
# For internal page-specific APIs:
# Prefer tailored, page-specific responses over strict REST conventions. This reduces:
# - Number of round trips
# - Data overfetching
# - Client-side data manipulation
# - Network bandwidth
#
# Example (Internal Page API):
#   // Good: Single endpoint returning exactly what the page needs
#   GET /api/dashboard
#   Response: {
#     user: { name, preferences },
#     recentGames: [ simplified game data ],
#     stats: { aggregated statistics }
#   }
#
#   // Avoid: Multiple REST endpoints requiring client assembly
#   GET /api/users/current
#   GET /api/games?user=current&limit=5
#   GET /api/stats/user/current
#
# For external/public APIs:
# Follow REST conventions to ensure:
# - Predictable behavior
# - Standard resource operations
# - Better documentation
# - Easier integration for external consumers
#
# Example (External API):
#   GET /api/v1/games/{id}
#   GET /api/v1/users/{id}
#   GET /api/v1/users/{id}/statistics

# API Route Organization
# API route files (e.g., route.ts in app/api routes) should ONLY contain:
# - Request parsing and validation
# - Response formatting
# - Error handling
# - Calling business logic functions
#
# All other logic should be moved to separate files:
# - Business logic → services/
# - Data access → repositories/
# - Workflows → workflows/
# - Validation schemas → schemas/
# - Types/interfaces → types/
#
# Example:
#   // Bad: Business logic in API route
#   // app/api/game/analyze/route.ts
#   export async function POST(req: Request) {
#     const { fen } = await req.json();
#     
#     // Business logic doesn't belong here
#     const pieces = fen.split(' ')[0];
#     const score = calculateMaterialScore(pieces);
#     const tactics = findTacticalMotifs(fen);
#     return Response.json({ score, tactics });
#   }
#
#   // Good: API route only handles request/response
#   // app/api/game/analyze/route.ts
#   import { analyzePosition } from '@/services/gameAnalysis';
#   import { validateFen } from '@/utils/validation';
#
#   export async function POST(req: Request) {
#     try {
#       const { fen } = await req.json();
#       if (!validateFen(fen)) {
#         return Response.json({ error: 'Invalid FEN' }, { status: 400 });
#       }
#       
#       const analysis = await analyzePosition(fen);
#       return Response.json(analysis);
#     } catch (error) {
#       return Response.json({ error: 'Analysis failed' }, { status: 500 });
#     }
#   }
#
#   // Business logic lives in a service
#   // services/gameAnalysis.ts
#   export async function analyzePosition(fen: string) {
#     const pieces = parseFen(fen);
#     const score = calculateMaterialScore(pieces);
#     const tactics = findTacticalMotifs(fen);
#     return { score, tactics };
#   }

[Previous content continues...]